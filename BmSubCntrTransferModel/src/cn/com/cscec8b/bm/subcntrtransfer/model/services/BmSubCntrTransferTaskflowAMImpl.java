package cn.com.cscec8b.bm.subcntrtransfer.model.services;

import cn.com.cscec8b.bm.subcntrtransfer.model.services.common.BmSubCntrTransferTaskflowAM;
import cn.com.cscec8b.framework.model.common.CustomAppModuleImpl;


import cn.com.cscec8b.framework.model.common.CustomViewObjectImpl;

import cn.com.cscec8b.framework.model.objects.CscecUser;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 17 16:15:32 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BmSubCntrTransferTaskflowAMImpl extends CustomAppModuleImpl implements BmSubCntrTransferTaskflowAM {
    private ADFLogger adfLogger;

    /**
     * This is the default constructor (do not remove).
     */
    public BmSubCntrTransferTaskflowAMImpl() {
    }


    /**
     * Container's getter for BmSubcntrTransferLineT1.
     * @return BmSubcntrTransferLineT1
     */
    public CustomViewObjectImpl getBmSubcntrTransferLineT1() {
        return (CustomViewObjectImpl)findViewObject("BmSubcntrTransferLineT1");
    }

    /**
     * Container's getter for BmSubcntrDocumentHeaderToLinesLink1.
     * @return BmSubcntrDocumentHeaderToLinesLink1
     */
    public ViewLinkImpl getBmSubcntrDocumentHeaderToLinesLink1() {
        return (ViewLinkImpl)findViewLink("BmSubcntrDocumentHeaderToLinesLink1");
    }

    /**
     * Container's getter for BmSubcntrTransfer1.
     * @return BmSubcntrTransfer1
     */
    public CustomViewObjectImpl getBmSubcntrTransfer1() {
        return (CustomViewObjectImpl)findViewObject("BmSubcntrTransfer1");
    }

    /**
     * Container's getter for BmSubcntrTransferT1.
     * @return BmSubcntrTransferT1
     */
    public CustomViewObjectImpl getBmSubcntrTransferT1() {
        return (CustomViewObjectImpl)findViewObject("BmSubcntrTransferT1");
    }

    /**
     * 调用function
     * //                STM.STM_BM_SUBCNTR_TRANSFER_PKG.transfer(p_SUBCNTR_ID       NUMBER,
//                     P_AUDIT_AMOUNT     NUMBER,
//                     P_DEDUCTION_AMOUNT NUMBER,
//                     P_VISA_AMOUNT      NUMBER,
//                     P_TRANFER_DATE     DATE,
p_create_by)
     * **/

    public String transfer(Number subcntrId, Number auditAmount,
                           Number deductionAmount, Number visaAmount,
                           Date transferDate, Number createBy) {
        String documentNumer = "";
        CallableStatement cs = null;
        cs =
 this.getDBTransaction().createCallableStatement("begin ?:=STM.STM_BM_SUBCNTR_TRANSFER_PKG.transfer(?,?,?,?,?,?);end;",
                                                 0);
        try {
            //设置function的参数
            cs.setInt(2, subcntrId.intValue());
            cs.setDouble(3, auditAmount.doubleValue());
            cs.setDouble(4, deductionAmount.doubleValue());
            cs.setDouble(5, visaAmount.doubleValue());
            cs.setDate(6, transferDate.dateValue());
            cs.setInt(7, createBy.intValue());
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.execute();
            documentNumer = cs.getString(1);
            return documentNumer;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return documentNumer;

    }

    public String updateTransferHeaderStatus(String documentNumer,
                                             String status) {
        CallableStatement cs = null;
        cs =
 this.getDBTransaction().createCallableStatement("begin ?:=STM.STM_BM_SUBCNTR_TRANSFER_PKG.update_Transfer_Header_Status(?,?);end;",
                                                 0);
        try {
            //设置function的参数
            cs.setString(2, documentNumer);
            cs.setString(3, status);
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.execute();
            documentNumer = cs.getString(1);
            return documentNumer;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return documentNumer;

    }

    /**
     *
     * 更新transfer_header_t表某行状态为传送中
     *
     * **/

    public void updateHeaderStatus(String documentNumber, String bmDocumentId,
                                   String bmDocumentType, String status) {
        String sql = "UPDATE bm.Bm_Subcntr_Transfer_Header_t  TH\n" +
            "SET TH.TRANSFER_STATUS ='" + status + "'\n" +
            "WHERE TH.DOCUMENT_NUMBER='" + documentNumber + "'\n" +
            "AND TH.BM_DOCUMENT_ID ='" + bmDocumentId + "'\n" +
            "AND TH.BM_DOCUMENT_TYPE='" + bmDocumentType + "'";
        excuteUpdate(sql);
    }


    /**
     *
     * 传入update sql语句，执行操作
     *
     * **/
    private void excuteUpdate(String sql) {
        PreparedStatement stmt =
            this.getDBTransaction().createPreparedStatement(sql, 0);
        try {
            stmt.executeUpdate();
            this.getDBTransaction().commit();
            stmt.close();
        } catch (SQLException ex) {
            this.getDBTransaction().rollback();
            adfLogger.log(ADFLogger.ERROR, ex.getMessage());
        }

    }


    /*****
     *
     * 计算返回的实际传送金额
     *
     * **/
    public Double getActualTransferAmount(Number subcntrId,
                                          String documentNumber, String type) {
        Double code = 0.00;
        CallableStatement cs = null;
        String sql = "";
        if ("MEASURE".equals(type)) {
            sql =
"begin ?:=STM.STM_BM_SUBCNTR_TRANSFER_PKG.COUNT_ACTUAL_TRANSFER_AUDIT(?,?);end;";
        } else if ("VISA".equals(type)) {
            sql =
"begin ?:=STM.STM_BM_SUBCNTR_TRANSFER_PKG.COUNT_ACTUAL_TRANSFER_VISA(?,?);end;";
        }
        cs = this.getDBTransaction().createCallableStatement(sql, 0);
        try {
            //设置function的参数
            cs.setInt(2, subcntrId.intValue());
            cs.setString(3, documentNumber);
            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.execute();
            code = cs.getDouble(1);
            return code;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return code;

    }


    public Number getInvalidTransferStatus(int subcntrId) {
        String sql =
            "select count(*) from bm.bm_subcntr_transfer_header_t t\n" +
            " where t.transfer_status in('TRANSFERING','FAIL','STORAGE_FAIL','CANCEL_FAIL') \n" +
            " and t.subcntr_id = '" + subcntrId + "' ";
        return excuteQuery(sql);
    }


    public String isValidateTransferDate(oracle.jbo.domain.Date transferDate,
                                         int orgId) {
        CscecUser user =
            (CscecUser)ADFContext.getCurrent().getPageFlowScope().get("currentLoginUser");
        Number projectId = new Number(0);
        try {
            projectId = new Number(user.getProjectId());
        } catch (SQLException e) {
            e.printStackTrace();
        }
        String sql =
            " select stm.stm_bm_subcntr_transfer_pkg.is_validate_transfer_date(" +
            "TO_DATE('" + transferDate.dateValue() + "','yyyy/MM/dd'),'" +
            orgId + "','" + projectId + "')  from dual  ";
        return executeQuery(sql);
    }

    private String executeQuery(String sql) {
        PreparedStatement stmt =
            this.getDBTransaction().createPreparedStatement(sql, 0);
        ResultSet rs = null;
        try {
            stmt.execute();
            rs = stmt.getResultSet();
            if (rs.next()) {
                String returnMsg = "";
                if (null != rs.getObject(1)) {
                    returnMsg =
                            rs.getObject(1).toString() == null ? "" : rs.getObject(1).toString();
                }
                return returnMsg;
            } else {
                return "";
            }
        } catch (SQLException ex) {
            //    ex.printStackTrace();
            adfLogger.log(ADFLogger.ERROR, ex.getMessage());
            this.getDBTransaction().rollback();
            return "";
        } finally {
            if (stmt != null) {
                try {
                    rs.close();
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for BmsubcntrTransferHeaderT1.
     * @return BmsubcntrTransferHeaderT1
     */
    public CustomViewObjectImpl getBmsubcntrTransferHeaderT1() {
        return (CustomViewObjectImpl)findViewObject("BmsubcntrTransferHeaderT1");
    }

    /**
     * Container's getter for BmSubcntrTransferAmount1.
     * @return BmSubcntrTransferAmount1
     */
    public CustomViewObjectImpl getBmSubcntrTransferAmount1() {
        return (CustomViewObjectImpl)findViewObject("BmSubcntrTransferAmount1");
    }

    /**
     * Container's getter for BmsubcntrTransferHeaderT2.
     * @return BmsubcntrTransferHeaderT2
     */
    public CustomViewObjectImpl getBmsubcntrTransferHeaderT2() {
        return (CustomViewObjectImpl)findViewObject("BmsubcntrTransferHeaderT2");
    }
    //    /**
    //     *
    //     * 获取不符合条件的行数
    //     * */
    //    public Number getInvalidHeaderCount(){
    //        String sql ="";
    //        return excuteQuery(sql);
    //        }

    /***
     *
     * 执行查询sql，且返回number类型的sql查询语句
     *
     * **/
    private Number excuteQuery(String sql) {
        PreparedStatement stmt =
            this.getDBTransaction().createPreparedStatement(sql, 0);
        ResultSet rs = null;
        try {
            stmt.execute();
            rs = stmt.getResultSet();
            if (rs.next()) {
                Number allAmount = new Number(0);
                if (null != rs.getObject(1)) {
                    allAmount =
                            new Number(rs.getObject(1).toString()) == null ?
                            new Number(0) :
                            new Number(rs.getObject(1).toString());
                }
                return allAmount;

            } else {
                return new Number(0);
            }
        } catch (SQLException ex) {
            //    ex.printStackTrace();
            adfLogger.log(ADFLogger.ERROR, ex.getMessage());
            this.getDBTransaction().rollback();
            return new Number(0);
        } finally {
            if (stmt != null) {
                try {
                    rs.close();
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

}
